name: Clash 配置生成器

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */6 * * *'  # 每6小时运行一次

jobs:
  build-config:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 生成时间戳
      id: timestamp
      run: |
        current_date=$(date -u +'%Y%m%d-%H%M%S')
        echo "CURRENT_DATE=$current_date" >> $GITHUB_ENV
        echo "TAG_NAME=config-$current_date" >> $GITHUB_ENV

    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install pyyaml requests

    - name: 生成配置文件
      run: |
        cat << 'EOF' > generate_config.py
        import base64
        import yaml
        import requests
        import json
        from urllib.parse import urlparse

        class ClashGenerator:
            RULE_SOURCES = [
                "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/China/China.list",
                "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Global/Global.list",
                "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/ChinaMedia/ChinaMedia.list"
            ]

            def __init__(self):
                self.config = {
                    "port": 7890,
                    "socks-port": 7891,
                    "mode": "Rule",
                    "log-level": "info",
                    "proxies": [],
                    "proxy-groups": [
                        {
                            "name": "🚀 节点选择",
                            "type": "select",
                            "proxies": []
                        },
                        {
                            "name": "🎯 全球直连",
                            "type": "select",
                            "proxies": ["DIRECT"]
                        }
                    ],
                    "rules": []
                }

            def fetch_subscription(self):
                sub_url = "https://raw.githubusercontent.com/Pawdroid/Free-servers/main/sub"
                response = requests.get(sub_url)
                decoded = base64.b64decode(response.text).decode('utf-8')
                return [line for line in decoded.splitlines() if line.startswith('vmess://')]

            def parse_vmess(self, link):
                config_str = base64.b64decode(link[8:]).decode('utf-8')
                config = json.loads(config_str)
                return {
                    "name": config["ps"],
                    "type": "vmess",
                    "server": config["add"],
                    "port": config["port"],
                    "uuid": config["id"],
                    "alterId": config["aid"],
                    "cipher": "auto",
                    "tls": config.get("tls") == "tls",
                    "network": config.get("net", "tcp")
                }

            def load_rules(self):
                rules = []
                for url in self.RULE_SOURCES:
                    try:
                        response = requests.get(url, timeout=10)
                        rules.extend([
                            line.replace("IP-CIDR", "GEOIP")
                            for line in response.text.splitlines()
                            if not line.startswith('#') and line.strip()
                        ])
                    except Exception as e:
                        print(f"规则源 {url} 加载失败: {str(e)}")
                
                # 添加核心规则
                rules += [
                    "GEOIP,CN,🎯 全球直连",
                    "MATCH,🚀 节点选择"
                ]
                return list(dict.fromkeys(rules))  # 去重

            def generate(self):
                vmess_links = self.fetch_subscription()
                self.config["proxies"] = [self.parse_vmess(link) for link in vmess_links]
                self.config["proxy-groups"][0]["proxies"] = [p["name"] for p in self.config["proxies"]]
                self.config["rules"] = self.load_rules()

                with open("sub/config.yaml", "w") as f:
                    yaml.dump(self.config, f, allow_unicode=True, width=2147483647)

        if __name__ == "__main__":
            generator = ClashGenerator()
            generator.generate()
        EOF

        python generate_config.py

    - name: 验证配置文件
      run: |
        # 基础结构检查
        if ! grep -q 'proxies:' sub/config.yaml || ! grep -q 'proxy-groups:' sub/config.yaml; then
          echo "::error::配置文件结构不完整"
          exit 1
        fi

        # 节点数量检查
        node_count=$(grep -c 'name:' sub/config.yaml)
        if [ "$node_count" -lt 3 ]; then
          echo "::error::有效节点不足: $node_count"
          exit 1
        fi

        # 规则完整性检查
        required_rules=("GEOIP,CN" "MATCH")
        for rule in "${required_rules[@]}"; do
          if ! grep -q "$rule" sub/config.yaml; then
            echo "::error::缺失必要规则: $rule"
            exit 1
          fi
        done

    - name: 创建版本发布
      uses: softprops/action-gh-release@v1
      with:
        files: sub/config.yaml
        tag_name: ${{ env.TAG_NAME }}
        name: "Clash Config ${{ env.CURRENT_DATE }}"
        generate_release_notes: true
        draft: false
        body: |
          自动生成的 Clash 配置文件
          - 包含 $(grep -c 'name:' sub/config.yaml) 个节点
          - 最后更新: ${{ env.CURRENT_DATE }}
          - 规则数量: $(grep -c 'rules:' sub/config.yaml)
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: 清理工作区
      run: |
        rm -rf nodes.txt generate_config.py
