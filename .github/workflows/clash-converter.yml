name: Clash Config Converter

on:
  schedule:
    - cron: '0 0 * * *'  # 每天UTC时间0点执行
  workflow_dispatch:

jobs:
  convert-and-push:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: pip install pyyaml requests

    - name: Convert config
      run: |
        # 下载订阅
        curl -s -o raw_sub.txt "https://ghproxy.com/https://raw.githubusercontent.com/Pawdroid/Free-servers/main/sub"

        # 内联Python脚本（修复版）
        python3 <<EOF
        import yaml
        import base64
        import json
        import requests
        import re

        def safe_b64decode(data):
            # 自动补全Base64填充
            missing_padding = len(data) % 4
            if missing_padding:
                data += '=' * (4 - missing_padding)
            # 处理URL安全编码
            data = data.replace('-', '+').replace('_', '/')
            return base64.b64decode(data)

        # 读取原始订阅
        with open('raw_sub.txt', 'r') as f:
            content = f.read().strip()
            print(f"原始内容长度: {len(content)}")  # 调试日志

        try:
            # 改进的解码方式
            decoded = safe_b64decode(content).decode('utf-8')
            print("解码成功")  # 调试日志
        except Exception as e:
            print(f"解码失败: {str(e)}")
            # 尝试直接使用原始内容
            decoded = content
            if not decoded:
                raise ValueError("订阅内容为空")
                
        # Base64解码
        decoded = base64.b64decode(content).decode('utf-8')

        # 生成Clash配置框架
        clash_config = {
            'port': 7890,
            'socks-port': 7891,
            'mode': 'Rule',
            'log-level': 'info',
            'external-controller': '0.0.0.0:9090',
            'proxies': [],
            'proxy-groups': [],
            'rules': []
        }

        # 解析节点配置
        proxies = []
        for line in decoded.split('\n'):
            if line.startswith('vmess://'):
                try:
                    config_str = base64.b64decode(line[8:]).decode('utf-8')
                    config = json.loads(config_str)
                    proxy = {
                        'name': config['ps'],
                        'type': 'vmess',
                        'server': config['add'],
                        'port': config['port'],
                        'uuid': config['id'],
                        'alterId': config['aid'],
                        'cipher': 'auto'
                    }
                    proxies.append(proxy)
                except Exception as e:
                    print(f"解析失败: {str(e)}")

        # 构建完整代理组（兼容rule.ini）
        proxy_groups = [
            # 主要代理组
            {
                'name': '🚀 节点选择',
                'type': 'select',
                'proxies': ['♻️ 自动选择', 'DIRECT'] + [p['name'] for p in proxies]
            },
            {
                'name': '♻️ 自动选择',
                'type': 'url-test',
                'url': 'http://www.gstatic.com/generate_204',
                'interval': 300,
                'proxies': [p['name'] for p in proxies]
            },
            # 地区组
            {
                'name': '🌎 北美地区',
                'type': 'url-test',
                'url': 'http://www.gstatic.com/generate_204',
                'interval': 300,
                'proxies': [p['name'] for p in proxies if '美' in p['name'] or 'US' in p['name']]
            },
            # 其他地区组...
            # 服务组
            {
                'name': '📺 国外媒体',
                'type': 'select',
                'proxies': ['🚀 节点选择', '🌎 北美地区', 'DIRECT']
            },
            {
                'name': 'Ⓜ️ 微软服务',
                'type': 'select',
                'proxies': ['DIRECT', '🚀 节点选择']
            },
            # 系统组
            {
                'name': '🎯 全球直连',
                'type': 'select',
                'proxies': ['DIRECT']
            },
            {
                'name': '🛑 全球拦截',
                'type': 'select',
                'proxies': ['REJECT', 'DIRECT']
            }
        ]

        # 动态规则源（增强REJECT/DIRECT规则）
        rule_sources = {
            # 直连规则
            'DIRECT': [
                'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/China/China.list',
                'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/ChinaIP/ChinaIP.list'
            ],
            # 代理规则
            'PROXY': [
                'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Proxy/Proxy.list',
                'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Global/Global.list'
            ],
            # 拦截规则
            'REJECT': [
                'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Advertising/Advertising.list',
                'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Privacy/Privacy.list'
            ]
        }

        # 构建规则链（优先级排序）
        rules = [
            # 最高优先级：直连规则
            'GEOIP,CN,DIRECT',
            'DOMAIN-KEYWORD,edu,DIRECT',
            *[f'{rule},DIRECT' for url in rule_sources['DIRECT'] for rule in fetch_ruleset(url)],
            
            # 其次：代理规则
            *[f'{rule},🚀 节点选择' for url in rule_sources['PROXY'] for rule in fetch_ruleset(url)],
            
            # 然后：服务特定规则
            'DOMAIN-SUFFIX,microsoft.com,Ⓜ️ 微软服务',
            'DOMAIN-SUFFIX,apple.com,DIRECT',
            
            # 拦截规则
            *[f'{rule},REJECT' for url in rule_sources['REJECT'] for rule in fetch_ruleset(url)],
            
            # 最终规则
            'MATCH,🐟 漏网之鱼'  # 保持与rule.ini一致
        ]

        # 合并配置
        clash_config.update({
            'proxies': proxies,
            'proxy-groups': proxy_groups,
            'rules': rules
        })

        # 保存配置文件
        with open('./sub/config.yaml', 'w') as f:
            yaml.dump(clash_config, f, allow_unicode=True, sort_keys=False)
        EOF

    - name: Commit and push
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git pull origin master
        git add ./sub/config.yaml
        git commit -m "Auto update Clash config [$(date +'%Y-%m-%d')]" || echo "No changes"
        git push
