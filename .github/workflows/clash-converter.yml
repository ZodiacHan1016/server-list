name: Clash 配置生成器

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */6 * * *'  # 每6小时运行一次

jobs:
  build-config:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 生成时间戳
      id: timestamp
      run: |
        current_date=$(date -u +'%Y%m%d-%H%M%S')
        echo "CURRENT_DATE=$current_date" >> $GITHUB_ENV
        echo "TAG_NAME=config-$current_date" >> $GITHUB_ENV

    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install pyyaml requests

    - name: 生成配置文件
      run: |
        cat << 'EOF' > generate_config.py
        import base64
        import yaml
        import requests
        import json
        import re
        from concurrent.futures import ThreadPoolExecutor

        class RuleProcessor:
            RULE_PATTERN = re.compile(r'^(?P<type>[A-Z-]+),(?P<param>[^,]+),(?P<group>[^,]+)$')

            @classmethod
            def process_rule(cls, line):
                line = line.strip()
                if not line or line.startswith('#'):
                    return None

                # 格式转换处理
                conversions = {
                    'IP-CIDR': 'GEOIP',
                    'FINAL': 'MATCH',
                    'PROCESS-NAME': 'PROCESS-NAME'
                }
                for old, new in conversions.items():
                    if line.startswith(old):
                        line = line.replace(old, new, 1)

                # 标准化规则格式
                match = cls.RULE_PATTERN.match(line)
                if not match:
                    return None
                
                return f"{match.group('type')},{match.group('param')},{match.group('group')}"

            @classmethod
            def fetch_rules(cls, url):
                try:
                    resp = requests.get(url, timeout=10)
                    return [cls.process_rule(line) for line in resp.text.splitlines()]
                except Exception as e:
                    print(f"规则源加载失败: {url} - {str(e)}")
                    return []

        class ClashGenerator:
            RULE_SOURCES = [
                "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/China/China.list",
                "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Global/Global.list",
                "https://raw.githubusercontent.com/DivineEngine/Profiles/master/Clash/RuleSet/Unbreak.list"
            ]

            def __init__(self):
                self.config = {
                    "port": 7890,
                    "socks-port": 7891,
                    "mode": "Rule",
                    "proxies": [],
                    "proxy-groups": [
                        {
                            "name": "🚀 节点选择",
                            "type": "select",
                            "proxies": []
                        },
                        {
                            "name": "🎯 全球直连",
                            "type": "select",
                            "proxies": ["DIRECT"]
                        }
                    ],
                    "rules": []
                }

            def load_subscription(self):
                sub_url = "https://raw.githubusercontent.com/Pawdroid/Free-servers/main/sub"
                response = requests.get(sub_url)
                decoded = base64.b64decode(response.text).decode('utf-8')
                return [line for line in decoded.splitlines() if line.startswith('vmess://')]

            def parse_vmess(self, link):
                config_str = base64.b64decode(link[8:]).decode('utf-8')
                config = json.loads(config_str)
                return {
                    "name": config["ps"],
                    "type": "vmess",
                    "server": config["add"],
                    "port": config["port"],
                    "uuid": config["id"],
                    "alterId": config["aid"],
                    "cipher": "auto",
                    "tls": config.get("tls") == "tls",
                    "network": config.get("net", "tcp")
                }

            def generate_rules(self):
                with ThreadPoolExecutor(max_workers=5) as executor:
                    results = executor.map(RuleProcessor.fetch_rules, self.RULE_SOURCES)
                
                rules = []
                for result in results:
                    rules.extend([r for r in result if r is not None])
                
                # 添加核心规则
                core_rules = [
                    "GEOIP,CN,🎯 全球直连",
                    "MATCH,🚀 节点选择"
                ]
                return list(dict.fromkeys(core_rules + rules))

            def generate(self):
                # 处理节点
                vmess_links = self.load_subscription()
                self.config["proxies"] = [self.parse_vmess(link) for link in vmess_links]
                self.config["proxy-groups"][0]["proxies"] = [p["name"] for p in self.config["proxies"]]
                
                # 处理规则
                self.config["rules"] = self.generate_rules()
                
                # 写入文件
                with open("sub/config.yaml", "w") as f:
                    yaml.dump(self.config, f, allow_unicode=True, width=2147483647)

        if __name__ == "__main__":
            generator = ClashGenerator()
            generator.generate()
        EOF

        python generate_config.py

    - name: 验证配置文件
      run: |
        # 检查规则格式
        invalid_rules=$(grep -vE '^[A-Z-]+,[^,]+,[^,]+$' sub/config.yaml | grep -vE '^ |^#|^port:|^socks-port:|^mode:|^proxies:|^proxy-groups:|^rules:' || true)
        if [ -n "$invalid_rules" ]; then
          echo "::error::发现无效规则格式:"
          echo "$invalid_rules"
          exit 1
        fi

        # 检查必要规则
        required_rules=(
            "GEOIP,CN,🎯 全球直连"
            "MATCH,🚀 节点选择"
        )
        for rule in "${required_rules[@]}"; do
            if ! grep -q "$rule" sub/config.yaml; then
                echo "::error::缺失必要规则: $rule"
                exit 1
            fi
        done

        # 检查节点数量
        node_count=$(grep -c 'name:' sub/config.yaml)
        if [ "$node_count" -lt 3 ]; then
            echo "::error::有效节点不足: $node_count"
            exit 1
        fi

    - name: 创建版本发布
      uses: softprops/action-gh-release@v1
      with:
        files: sub/config.yaml
        tag_name: ${{ env.TAG_NAME }}
        name: "Clash Config ${{ env.CURRENT_DATE }}"
        generate_release_notes: true
        draft: false
        body: |
          自动生成的 Clash 配置文件
          - 节点数量: $(grep -c 'name:' sub/config.yaml)
          - 规则数量: $(grep -c 'rules:' sub/config.yaml)
          - 生成时间: ${{ env.CURRENT_DATE }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: 清理工作区
      run: |
        rm -f generate_config.py
