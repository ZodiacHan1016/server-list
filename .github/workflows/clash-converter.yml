name: Clash 配置生成器

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */6 * * *'  # 每6小时运行一次

jobs:
  build-config:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      with:
        submodules: true

    - name: 生成时间戳
      id: timestamp
      run: |
        current_date=$(date -u +'%Y%m%d-%H%M%S')
        echo "CURRENT_DATE=$current_date" >> $GITHUB_ENV
        echo "TAG_NAME=config-$current_date" >> $GITHUB_ENV

    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install pyyaml requests

    - name: 获取订阅数据
      run: |
        mkdir -p sub
        curl -sL "https://raw.githubusercontent.com/Pawdroid/Free-servers/main/sub" -o sub/subscription.txt
        echo "原始订阅数据大小: $(wc -c < sub/subscription.txt) bytes"

    - name: 解码订阅内容
      run: |
        base64 -d sub/subscription.txt > sub/decoded.txt
        echo "解码后内容行数: $(wc -l < sub/decoded.txt)"

    - name: 更新规则订阅
      run: |
        mkdir -p rules
        wget -qO rules/China.list https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/China/China.list
        wget -qO rules/Global.list https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Global/Global.list
        wget -qO rules/Unbreak.list https://raw.githubusercontent.com/DivineEngine/Profiles/master/Clash/RuleSet/Unbreak.list

    - name: 生成配置文件
      run: |
        cat << 'EOF' > generate_config.py
        import base64
        import yaml
        import requests
        import json
        import re
        import logging
        from concurrent.futures import ThreadPoolExecutor

        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s'
        )

        class RuleProcessor:
            TYPE_CONVERSIONS = {
                'IP-CIDR': 'GEOIP',
                'FINAL': 'MATCH',
                'SRC-IP-CIDR': 'IP-CIDR',
                'DST-PORT': 'DST-PORT'
            }

            VALID_TYPES = [
                'DOMAIN', 'DOMAIN-SUFFIX', 'DOMAIN-KEYWORD',
                'IP-CIDR', 'GEOIP', 'MATCH', 'PROCESS-NAME',
                'DST-PORT', 'SRC-PORT'
            ]

            @classmethod
            def process_rule(cls, line):
                line = line.strip()
                original_line = line
                line = line.split('#')[0].strip()
                if not line:
                    return None

                line = re.sub(r'\s+,\s*', ',', line)
                line = line.replace('，', ',')
                line = re.sub(r'([^\s])(DOMAIN|MATCH)', r'\1,\2', line)

                parts = [p.strip() for p in line.split(',')]
                parts = [p for p in parts if p]

                if len(parts) == 2:
                    if parts[0] == 'MATCH':
                        parts.append('🚀 节点选择')
                    else:
                        parts.append('🎯 全球直连')

                if len(parts) != 3:
                    logging.warning(f"无法解析规则: {original_line}")
                    return None

                rule_type, param, group = parts
                rule_type = cls.TYPE_CONVERSIONS.get(rule_type, rule_type)
                if rule_type not in cls.VALID_TYPES:
                    logging.warning(f"无效规则类型: {original_line}")
                    return None

                param = cls.process_parameter(rule_type, param)
                group = group.split('#')[0].strip()
                return f"{rule_type},{param},{group}"

            @classmethod
            def process_parameter(cls, rule_type, param):
                if rule_type in ['IP-CIDR', 'GEOIP']:
                    param = param.replace('/', '／').replace('／', '/')
                    if '/' not in param:
                        param += '/32' if '.' in param else '/128'
                elif rule_type in ['DST-PORT', 'SRC-PORT']:
                    param = param.replace('-', ':')
                    if ':' not in param:
                        param += ':' + param
                return param

            @classmethod
            def load_rules(cls, file_path):
                with open(file_path, 'r') as f:
                    return [cls.process_rule(line) for line in f]

        class ClashGenerator:
            def __init__(self):
                self.config = {
                    "port": 7890,
                    "socks-port": 7891,
                    "mode": "Rule",
                    "log-level": "info",
                    "proxies": [],
                    "proxy-groups": [
                        {
                            "name": "🚀 节点选择",
                            "type": "select",
                            "proxies": []
                        },
                        {
                            "name": "🎯 全球直连",
                            "type": "select",
                            "proxies": ["DIRECT"]
                        }
                    ],
                    "rules": []
                }

            def load_proxies(self):
                with open('sub/decoded.txt', 'r') as f:
                    return [line.strip() for line in f if line.startswith('vmess://')]

            def parse_vmess(self, link):
                try:
                    config_str = base64.b64decode(link[8:]).decode()
                    config = json.loads(config_str)
                    return {
                        "name": config["ps"].strip(),
                        "type": "vmess",
                        "server": config["add"],
                        "port": config["port"],
                        "uuid": config["id"],
                        "alterId": config["aid"],
                        "cipher": "auto",
                        "tls": config.get("tls") == "tls",
                        "network": config.get("net", "tcp")
                    }
                except Exception as e:
                    logging.warning(f"解析节点失败: {link[:30]}... - {str(e)}")
                    return None

            def generate(self):
                # 处理节点
                vmess_links = self.load_proxies()
                valid_nodes = [node for node in (self.parse_vmess(link) for link in vmess_links) if node]
                self.config["proxies"] = valid_nodes
                self.config["proxy-groups"][0]["proxies"] = [p["name"] for p in valid_nodes]

                # 处理规则
                with ThreadPoolExecutor() as executor:
                    rule_files = ['rules/China.list', 'rules/Global.list', 'rules/Unbreak.list']
                    results = executor.map(RuleProcessor.load_rules, rule_files)
                
                rules = []
                for result in results:
                    rules.extend([r for r in result if r])
                
                # 添加核心规则
                core_rules = [
                    "GEOIP,CN,🎯 全球直连",
                    "MATCH,🚀 节点选择"
                ]
                self.config["rules"] = core_rules + rules

                # 写入文件
                with open('sub/config.yaml', 'w') as f:
                    yaml.dump(self.config, f, allow_unicode=True, width=2147483647)
                logging.info(f"生成成功: {len(valid_nodes)}节点, {len(self.config['rules'])}规则")

        if __name__ == "__main__":
            ClashGenerator().generate()
        EOF

        python generate_config.py

    - name: 最终验证
      run: |
        # 验证YAML格式
        python -c "import yaml; yaml.safe_load(open('sub/config.yaml'))"
        
        # 检查必要元素
        required_items=(
            "proxies"
            "proxy-groups"
            "rules"
            "GEOIP,CN,🎯 全球直连"
            "MATCH,🚀 节点选择"
        )
        for item in "${required_items[@]}"; do
            if ! grep -q "$item" sub/config.yaml; then
                echo "::error::缺失必要元素: $item"
                exit 1
            fi
        done

        echo "✅ 配置文件验证通过"

    - name: 创建版本发布
      uses: softprops/action-gh-release@v1
      with:
        files: sub/config.yaml
        tag_name: ${{ env.TAG_NAME }}
        name: "Clash Config ${{ env.CURRENT_DATE }}"
        generate_release_notes: true
        draft: false
        body: |
          自动生成的 Clash 配置文件
          - 生成时间: ${{ env.CURRENT_DATE }}
          - 节点数量: $(grep -c 'name:' sub/config.yaml)
          - 规则数量: $(grep -c 'rules:' sub/config.yaml)
          - 包含功能:
            * 自动节点选择
            * 中国大陆直连
            * 广告拦截规则
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: 清理工作区
      run: |
        rm -f sub/subscription.txt sub/decoded.txt
        rm -rf rules/
