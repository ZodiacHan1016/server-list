name: Clash 配置生成器

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */6 * * *'  # 每6小时运行一次

jobs:
  build-config:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 生成时间戳
      id: timestamp
      run: |
        current_date=$(date -u +'%Y%m%d-%H%M%S')
        echo "CURRENT_DATE=$current_date" >> $GITHUB_ENV
        echo "TAG_NAME=config-$current_date" >> $GITHUB_ENV

    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install pyyaml requests

    - name: 生成配置文件
      run: |
        cat << 'EOF' > generate_config.py
        import base64
        import yaml
        import requests
        import json
        import re
        import logging
        from concurrent.futures import ThreadPoolExecutor

        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s'
        )

        class RuleProcessor:
            RULE_PATTERN = re.compile(
                r'^(?P<type>DOMAIN|DOMAIN-SUFFIX|DOMAIN-KEYWORD|IP-CIDR|GEOIP|MATCH|PROCESS-NAME),'
                r'(?P<param>[^,]+),'
                r'(?P<group>[^\s,]+)$'
            )

            @classmethod
            def process_rule(cls, line):
                line = line.strip()
                if not line or line.startswith('#'):
                    return None

                # 格式转换处理
                conversions = {
                    'IP-CIDR': 'GEOIP',
                    'FINAL': 'MATCH'
                }
                for old, new in conversions.items():
                    if line.startswith(old):
                        line = line.replace(old, new, 1)

                # 标准化规则格式
                match = cls.RULE_PATTERN.match(line)
                if not match:
                    logging.warning(f"过滤无效规则: {line}")
                    return None
                
                return f"{match.group('type')},{match.group('param')},{match.group('group')}"

            @classmethod
            def fetch_rules(cls, url):
                try:
                    resp = requests.get(url, timeout=10)
                    return [cls.process_rule(line) for line in resp.text.splitlines()]
                except Exception as e:
                    logging.error(f"规则源加载失败: {url} - {str(e)}")
                    return []

        class ClashGenerator:
            RULE_SOURCES = [
                "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/China/China.list",
                "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Global/Global.list",
                "https://raw.githubusercontent.com/DivineEngine/Profiles/master/Clash/RuleSet/Unbreak.list"
            ]

            def __init__(self):
                self.config = {
                    "port": 7890,
                    "socks-port": 7891,
                    "mode": "Rule",
                    "log-level": "info",
                    "proxies": [],
                    "proxy-groups": [
                        {
                            "name": "🚀 节点选择",
                            "type": "select",
                            "proxies": []
                        },
                        {
                            "name": "🎯 全球直连",
                            "type": "select",
                            "proxies": ["DIRECT"]
                        }
                    ],
                    "rules": []
                }

            def load_subscription(self):
                sub_url = "https://raw.githubusercontent.com/Pawdroid/Free-servers/main/sub"
                try:
                    response = requests.get(sub_url, timeout=15)
                    response.raise_for_status()
                    decoded = base64.b64decode(response.text).decode('utf-8')
                    return [line for line in decoded.splitlines() if line.startswith('vmess://')]
                except Exception as e:
                    logging.error(f"订阅加载失败: {str(e)}")
                    return []

            def parse_vmess(self, link):
                try:
                    config_str = base64.b64decode(link[8:]).decode('utf-8')
                    config = json.loads(config_str)
                    return {
                        "name": config["ps"].strip(),
                        "type": "vmess",
                        "server": config["add"],
                        "port": config["port"],
                        "uuid": config["id"],
                        "alterId": config["aid"],
                        "cipher": "auto",
                        "tls": config.get("tls") == "tls",
                        "network": config.get("net", "tcp")
                    }
                except Exception as e:
                    logging.warning(f"解析节点失败: {link[:50]}... - {str(e)}")
                    return None

            def generate_rules(self):
                with ThreadPoolExecutor(max_workers=5) as executor:
                    results = executor.map(RuleProcessor.fetch_rules, self.RULE_SOURCES)
                
                rules = []
                valid_count = 0
                invalid_count = 0
                
                for result in results:
                    for r in result:
                        if r is not None:
                            rules.append(r)
                            valid_count += 1
                        else:
                            invalid_count += 1
                
                # 添加核心规则
                core_rules = [
                    "GEOIP,CN,🎯 全球直连",
                    "MATCH,🚀 节点选择"
                ]
                
                # 最终过滤（二次验证）
                final_rules = []
                for rule in core_rules + rules:
                    if RuleProcessor.RULE_PATTERN.match(rule):
                        final_rules.append(rule)
                    else:
                        logging.warning(f"最终过滤无效规则: {rule}")
                        invalid_count += 1
                
                logging.info(f"规则处理完成: 有效规则 {len(final_rules)} 条, 过滤 {invalid_count} 条无效规则")
                return list(dict.fromkeys(final_rules))

            def generate(self):
                # 处理节点
                vmess_links = self.load_subscription()
                valid_nodes = [node for node in (self.parse_vmess(link) for link in vmess_links) if node]
                self.config["proxies"] = valid_nodes
                self.config["proxy-groups"][0]["proxies"] = [p["name"] for p in valid_nodes]
                
                # 处理规则
                self.config["rules"] = self.generate_rules()
                
                # 写入文件
                with open("sub/config.yaml", "w") as f:
                    yaml.dump(self.config, f, allow_unicode=True, width=2147483647)
                logging.info(f"配置文件生成成功，包含 {len(valid_nodes)} 个节点和 {len(self.config['rules'])} 条规则")

        if __name__ == "__main__":
            generator = ClashGenerator()
            generator.generate()
        EOF

        python generate_config.py

    - name: 自动修复配置文件
      run: |
        # 过滤无效规则
        echo "自动修复规则格式..."
        grep -E '^(DOMAIN|DOMAIN-SUFFIX|DOMAIN-KEYWORD|IP-CIDR|GEOIP|MATCH|PROCESS-NAME),[^,]+,[^,]+$' sub/config.yaml > temp_config.yaml
        mv temp_config.yaml sub/config.yaml

        # 确保必要规则存在
        required_rules=(
            "GEOIP,CN,🎯 全球直连"
            "MATCH,🚀 节点选择"
        )
        for rule in "${required_rules[@]}"; do
            if ! grep -q "$rule" sub/config.yaml; then
                echo "  - $rule" >> sub/config.yaml
                echo "::notice::已添加缺失规则: $rule"
            fi
        done

        # 格式化YAML文件
        echo "格式化配置文件..."
        python -c "import yaml; data = yaml.safe_load(open('sub/config.yaml')); open('sub/config.yaml', 'w').write(yaml.dump(data, allow_unicode=True, width=2147483647))"

    - name: 最终验证
      run: |
        # 检查基本结构
        if ! grep -q 'proxies:' sub/config.yaml || ! grep -q 'proxy-groups:' sub/config.yaml; then
          echo "::error::配置文件结构不完整"
          exit 1
        fi

        # 检查节点数量
        node_count=$(grep -c 'name:' sub/config.yaml)
        if [ "$node_count" -lt 3 ]; then
          echo "::error::有效节点不足: $node_count"
          exit 1
        fi

        echo "✅ 配置文件验证通过"

    - name: 创建版本发布
      uses: softprops/action-gh-release@v1
      with:
        files: sub/config.yaml
        tag_name: ${{ env.TAG_NAME }}
        name: "Clash Config ${{ env.CURRENT_DATE }}"
        generate_release_notes: true
        draft: false
        body: |
          自动生成的 Clash 配置文件
          - 节点数量: $(grep -c 'name:' sub/config.yaml)
          - 规则数量: $(grep -c 'rules:' sub/config.yaml)
          - 生成时间: ${{ env.CURRENT_DATE }}
          - 包含以下核心规则:
            - GEOIP,CN 直连
            - 自动节点选择
            - 广告拦截规则
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: 上传日志
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: generation-logs
        path: |
          generate_config.py
        retention-days: 1
